/* eslint-disable */

export const AllTypesProps: Record<string, any> = {
  Int_comparison_exp: {},
  String_comparison_exp: {},
  cursor_ordering: "enum" as const,
  game_aggregate_bool_exp: {
    count: "game_aggregate_bool_exp_count",
  },
  game_aggregate_bool_exp_count: {
    arguments: "game_select_column",
    filter: "game_bool_exp",
    predicate: "Int_comparison_exp",
  },
  game_aggregate_fields: {
    count: {
      columns: "game_select_column",
    },
  },
  game_aggregate_order_by: {
    count: "order_by",
    max: "game_max_order_by",
    min: "game_min_order_by",
  },
  game_arr_rel_insert_input: {
    data: "game_insert_input",
    on_conflict: "game_on_conflict",
  },
  game_bool_exp: {
    _and: "game_bool_exp",
    _not: "game_bool_exp",
    _or: "game_bool_exp",
    black_player: "uuid_comparison_exp",
    created_at: "timestamptz_comparison_exp",
    id: "uuid_comparison_exp",
    user: "user_bool_exp",
    userByWhitePlayer: "user_bool_exp",
    white_player: "uuid_comparison_exp",
  },
  game_constraint: "enum" as const,
  game_insert_input: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    user: "user_obj_rel_insert_input",
    userByWhitePlayer: "user_obj_rel_insert_input",
    white_player: "uuid",
  },
  game_max_order_by: {
    black_player: "order_by",
    created_at: "order_by",
    id: "order_by",
    white_player: "order_by",
  },
  game_min_order_by: {
    black_player: "order_by",
    created_at: "order_by",
    id: "order_by",
    white_player: "order_by",
  },
  game_on_conflict: {
    constraint: "game_constraint",
    update_columns: "game_update_column",
    where: "game_bool_exp",
  },
  game_order_by: {
    black_player: "order_by",
    created_at: "order_by",
    id: "order_by",
    user: "user_order_by",
    userByWhitePlayer: "user_order_by",
    white_player: "order_by",
  },
  game_pk_columns_input: {
    id: "uuid",
  },
  game_select_column: "enum" as const,
  game_set_input: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    white_player: "uuid",
  },
  game_stream_cursor_input: {
    initial_value: "game_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  game_stream_cursor_value_input: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    white_player: "uuid",
  },
  game_update_column: "enum" as const,
  game_updates: {
    _set: "game_set_input",
    where: "game_bool_exp",
  },
  moves_aggregate_fields: {
    count: {
      columns: "moves_select_column",
    },
  },
  moves_bool_exp: {
    _and: "moves_bool_exp",
    _not: "moves_bool_exp",
    _or: "moves_bool_exp",
    after_fen: "String_comparison_exp",
    before_fen: "String_comparison_exp",
    captured: "String_comparison_exp",
    color: "String_comparison_exp",
    created_at: "timestamptz_comparison_exp",
    flags: "String_comparison_exp",
    from: "String_comparison_exp",
    game_id: "uuid_comparison_exp",
    id: "uuid_comparison_exp",
    lan: "String_comparison_exp",
    piece: "String_comparison_exp",
    promotion: "String_comparison_exp",
    san: "String_comparison_exp",
    to: "String_comparison_exp",
    updated_at: "timestamptz_comparison_exp",
  },
  moves_constraint: "enum" as const,
  moves_insert_input: {
    created_at: "timestamptz",
    game_id: "uuid",
    id: "uuid",
    updated_at: "timestamptz",
  },
  moves_on_conflict: {
    constraint: "moves_constraint",
    update_columns: "moves_update_column",
    where: "moves_bool_exp",
  },
  moves_order_by: {
    after_fen: "order_by",
    before_fen: "order_by",
    captured: "order_by",
    color: "order_by",
    created_at: "order_by",
    flags: "order_by",
    from: "order_by",
    game_id: "order_by",
    id: "order_by",
    lan: "order_by",
    piece: "order_by",
    promotion: "order_by",
    san: "order_by",
    to: "order_by",
    updated_at: "order_by",
  },
  moves_pk_columns_input: {
    game_id: "uuid",
    id: "uuid",
  },
  moves_select_column: "enum" as const,
  moves_set_input: {
    created_at: "timestamptz",
    game_id: "uuid",
    id: "uuid",
    updated_at: "timestamptz",
  },
  moves_stream_cursor_input: {
    initial_value: "moves_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  moves_stream_cursor_value_input: {
    created_at: "timestamptz",
    game_id: "uuid",
    id: "uuid",
    updated_at: "timestamptz",
  },
  moves_update_column: "enum" as const,
  moves_updates: {
    _set: "moves_set_input",
    where: "moves_bool_exp",
  },
  mutation_root: {
    delete_game: {
      where: "game_bool_exp",
    },
    delete_game_by_pk: {
      id: "uuid",
    },
    delete_moves: {
      where: "moves_bool_exp",
    },
    delete_moves_by_pk: {
      game_id: "uuid",
      id: "uuid",
    },
    delete_user: {
      where: "user_bool_exp",
    },
    delete_user_by_pk: {
      id: "uuid",
    },
    insert_game: {
      objects: "game_insert_input",
      on_conflict: "game_on_conflict",
    },
    insert_game_one: {
      object: "game_insert_input",
      on_conflict: "game_on_conflict",
    },
    insert_moves: {
      objects: "moves_insert_input",
      on_conflict: "moves_on_conflict",
    },
    insert_moves_one: {
      object: "moves_insert_input",
      on_conflict: "moves_on_conflict",
    },
    insert_user: {
      objects: "user_insert_input",
      on_conflict: "user_on_conflict",
    },
    insert_user_one: {
      object: "user_insert_input",
      on_conflict: "user_on_conflict",
    },
    update_game: {
      _set: "game_set_input",
      where: "game_bool_exp",
    },
    update_game_by_pk: {
      _set: "game_set_input",
      pk_columns: "game_pk_columns_input",
    },
    update_game_many: {
      updates: "game_updates",
    },
    update_moves: {
      _set: "moves_set_input",
      where: "moves_bool_exp",
    },
    update_moves_by_pk: {
      _set: "moves_set_input",
      pk_columns: "moves_pk_columns_input",
    },
    update_moves_many: {
      updates: "moves_updates",
    },
    update_user: {
      _set: "user_set_input",
      where: "user_bool_exp",
    },
    update_user_by_pk: {
      _set: "user_set_input",
      pk_columns: "user_pk_columns_input",
    },
    update_user_many: {
      updates: "user_updates",
    },
  },
  order_by: "enum" as const,
  query_root: {
    game: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    game_aggregate: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    game_by_pk: {
      id: "uuid",
    },
    moves: {
      distinct_on: "moves_select_column",
      order_by: "moves_order_by",
      where: "moves_bool_exp",
    },
    moves_aggregate: {
      distinct_on: "moves_select_column",
      order_by: "moves_order_by",
      where: "moves_bool_exp",
    },
    moves_by_pk: {
      game_id: "uuid",
      id: "uuid",
    },
    user: {
      distinct_on: "user_select_column",
      order_by: "user_order_by",
      where: "user_bool_exp",
    },
    user_aggregate: {
      distinct_on: "user_select_column",
      order_by: "user_order_by",
      where: "user_bool_exp",
    },
    user_by_pk: {
      id: "uuid",
    },
  },
  subscription_root: {
    game: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    game_aggregate: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    game_by_pk: {
      id: "uuid",
    },
    game_stream: {
      cursor: "game_stream_cursor_input",
      where: "game_bool_exp",
    },
    moves: {
      distinct_on: "moves_select_column",
      order_by: "moves_order_by",
      where: "moves_bool_exp",
    },
    moves_aggregate: {
      distinct_on: "moves_select_column",
      order_by: "moves_order_by",
      where: "moves_bool_exp",
    },
    moves_by_pk: {
      game_id: "uuid",
      id: "uuid",
    },
    moves_stream: {
      cursor: "moves_stream_cursor_input",
      where: "moves_bool_exp",
    },
    user: {
      distinct_on: "user_select_column",
      order_by: "user_order_by",
      where: "user_bool_exp",
    },
    user_aggregate: {
      distinct_on: "user_select_column",
      order_by: "user_order_by",
      where: "user_bool_exp",
    },
    user_by_pk: {
      id: "uuid",
    },
    user_stream: {
      cursor: "user_stream_cursor_input",
      where: "user_bool_exp",
    },
  },
  timestamptz: `scalar.timestamptz` as const,
  timestamptz_comparison_exp: {
    _eq: "timestamptz",
    _gt: "timestamptz",
    _gte: "timestamptz",
    _in: "timestamptz",
    _lt: "timestamptz",
    _lte: "timestamptz",
    _neq: "timestamptz",
    _nin: "timestamptz",
  },
  user: {
    game_as_black_player: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    game_as_black_player_aggregate: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    games_as_white_player: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
    games_as_white_player_aggregate: {
      distinct_on: "game_select_column",
      order_by: "game_order_by",
      where: "game_bool_exp",
    },
  },
  user_aggregate_fields: {
    count: {
      columns: "user_select_column",
    },
  },
  user_bool_exp: {
    _and: "user_bool_exp",
    _not: "user_bool_exp",
    _or: "user_bool_exp",
    avatar: "String_comparison_exp",
    created_at: "timestamptz_comparison_exp",
    email: "String_comparison_exp",
    firstname: "String_comparison_exp",
    game_as_black_player: "game_bool_exp",
    game_as_black_player_aggregate: "game_aggregate_bool_exp",
    games_as_white_player: "game_bool_exp",
    games_as_white_player_aggregate: "game_aggregate_bool_exp",
    hash_password: "String_comparison_exp",
    id: "uuid_comparison_exp",
    lastname: "String_comparison_exp",
    updated_at: "timestamptz_comparison_exp",
  },
  user_constraint: "enum" as const,
  user_insert_input: {
    created_at: "timestamptz",
    game_as_black_player: "game_arr_rel_insert_input",
    games_as_white_player: "game_arr_rel_insert_input",
    id: "uuid",
    updated_at: "timestamptz",
  },
  user_obj_rel_insert_input: {
    data: "user_insert_input",
    on_conflict: "user_on_conflict",
  },
  user_on_conflict: {
    constraint: "user_constraint",
    update_columns: "user_update_column",
    where: "user_bool_exp",
  },
  user_order_by: {
    avatar: "order_by",
    created_at: "order_by",
    email: "order_by",
    firstname: "order_by",
    game_as_black_player_aggregate: "game_aggregate_order_by",
    games_as_white_player_aggregate: "game_aggregate_order_by",
    hash_password: "order_by",
    id: "order_by",
    lastname: "order_by",
    updated_at: "order_by",
  },
  user_pk_columns_input: {
    id: "uuid",
  },
  user_select_column: "enum" as const,
  user_set_input: {
    created_at: "timestamptz",
    id: "uuid",
    updated_at: "timestamptz",
  },
  user_stream_cursor_input: {
    initial_value: "user_stream_cursor_value_input",
    ordering: "cursor_ordering",
  },
  user_stream_cursor_value_input: {
    created_at: "timestamptz",
    id: "uuid",
    updated_at: "timestamptz",
  },
  user_update_column: "enum" as const,
  user_updates: {
    _set: "user_set_input",
    where: "user_bool_exp",
  },
  uuid: `scalar.uuid` as const,
  uuid_comparison_exp: {
    _eq: "uuid",
    _gt: "uuid",
    _gte: "uuid",
    _in: "uuid",
    _lt: "uuid",
    _lte: "uuid",
    _neq: "uuid",
    _nin: "uuid",
  },
};

export const ReturnTypes: Record<string, any> = {
  cached: {
    ttl: "Int",
    refresh: "Boolean",
  },
  game: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    user: "user",
    userByWhitePlayer: "user",
    white_player: "uuid",
  },
  game_aggregate: {
    aggregate: "game_aggregate_fields",
    nodes: "game",
  },
  game_aggregate_fields: {
    count: "Int",
    max: "game_max_fields",
    min: "game_min_fields",
  },
  game_max_fields: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    white_player: "uuid",
  },
  game_min_fields: {
    black_player: "uuid",
    created_at: "timestamptz",
    id: "uuid",
    white_player: "uuid",
  },
  game_mutation_response: {
    affected_rows: "Int",
    returning: "game",
  },
  moves: {
    after_fen: "String",
    before_fen: "String",
    captured: "String",
    color: "String",
    created_at: "timestamptz",
    flags: "String",
    from: "String",
    game_id: "uuid",
    id: "uuid",
    lan: "String",
    piece: "String",
    promotion: "String",
    san: "String",
    to: "String",
    updated_at: "timestamptz",
  },
  moves_aggregate: {
    aggregate: "moves_aggregate_fields",
    nodes: "moves",
  },
  moves_aggregate_fields: {
    count: "Int",
    max: "moves_max_fields",
    min: "moves_min_fields",
  },
  moves_max_fields: {
    after_fen: "String",
    before_fen: "String",
    captured: "String",
    color: "String",
    created_at: "timestamptz",
    flags: "String",
    from: "String",
    game_id: "uuid",
    id: "uuid",
    lan: "String",
    piece: "String",
    promotion: "String",
    san: "String",
    to: "String",
    updated_at: "timestamptz",
  },
  moves_min_fields: {
    after_fen: "String",
    before_fen: "String",
    captured: "String",
    color: "String",
    created_at: "timestamptz",
    flags: "String",
    from: "String",
    game_id: "uuid",
    id: "uuid",
    lan: "String",
    piece: "String",
    promotion: "String",
    san: "String",
    to: "String",
    updated_at: "timestamptz",
  },
  moves_mutation_response: {
    affected_rows: "Int",
    returning: "moves",
  },
  mutation_root: {
    delete_game: "game_mutation_response",
    delete_game_by_pk: "game",
    delete_moves: "moves_mutation_response",
    delete_moves_by_pk: "moves",
    delete_user: "user_mutation_response",
    delete_user_by_pk: "user",
    insert_game: "game_mutation_response",
    insert_game_one: "game",
    insert_moves: "moves_mutation_response",
    insert_moves_one: "moves",
    insert_user: "user_mutation_response",
    insert_user_one: "user",
    update_game: "game_mutation_response",
    update_game_by_pk: "game",
    update_game_many: "game_mutation_response",
    update_moves: "moves_mutation_response",
    update_moves_by_pk: "moves",
    update_moves_many: "moves_mutation_response",
    update_user: "user_mutation_response",
    update_user_by_pk: "user",
    update_user_many: "user_mutation_response",
  },
  query_root: {
    game: "game",
    game_aggregate: "game_aggregate",
    game_by_pk: "game",
    moves: "moves",
    moves_aggregate: "moves_aggregate",
    moves_by_pk: "moves",
    user: "user",
    user_aggregate: "user_aggregate",
    user_by_pk: "user",
  },
  subscription_root: {
    game: "game",
    game_aggregate: "game_aggregate",
    game_by_pk: "game",
    game_stream: "game",
    moves: "moves",
    moves_aggregate: "moves_aggregate",
    moves_by_pk: "moves",
    moves_stream: "moves",
    user: "user",
    user_aggregate: "user_aggregate",
    user_by_pk: "user",
    user_stream: "user",
  },
  timestamptz: `scalar.timestamptz` as const,
  user: {
    avatar: "String",
    created_at: "timestamptz",
    email: "String",
    firstname: "String",
    game_as_black_player: "game",
    game_as_black_player_aggregate: "game_aggregate",
    games_as_white_player: "game",
    games_as_white_player_aggregate: "game_aggregate",
    hash_password: "String",
    id: "uuid",
    lastname: "String",
    updated_at: "timestamptz",
  },
  user_aggregate: {
    aggregate: "user_aggregate_fields",
    nodes: "user",
  },
  user_aggregate_fields: {
    count: "Int",
    max: "user_max_fields",
    min: "user_min_fields",
  },
  user_max_fields: {
    avatar: "String",
    created_at: "timestamptz",
    email: "String",
    firstname: "String",
    hash_password: "String",
    id: "uuid",
    lastname: "String",
    updated_at: "timestamptz",
  },
  user_min_fields: {
    avatar: "String",
    created_at: "timestamptz",
    email: "String",
    firstname: "String",
    hash_password: "String",
    id: "uuid",
    lastname: "String",
    updated_at: "timestamptz",
  },
  user_mutation_response: {
    affected_rows: "Int",
    returning: "user",
  },
  uuid: `scalar.uuid` as const,
};

export const Ops = {
  query: "query_root" as const,
  mutation: "mutation_root" as const,
  subscription: "subscription_root" as const,
};
